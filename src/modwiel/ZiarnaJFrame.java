/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package modwiel;

import java.awt.Color;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.HashSet;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JSlider;
import modwiel.abstraction.INeighborhood;
import modwiel.impl.HexaLeft;
import modwiel.impl.HexaRand;
import modwiel.impl.HexaRight;
import modwiel.impl.Moore;
import modwiel.impl.Newman;
import modwiel.model.Field;
import modwiel.model.Rekrystalizacja;
import modwiel.model.RozrostZiaren;
import modwiel.service.WorkerThread;
import modwiel.service.WorkerThread2;

/**
 *
 * @author student
 */
public class ZiarnaJFrame extends javax.swing.JFrame {

    RozrostZiaren model;
    Rekrystalizacja model2;
    

    /**
     * Creates new form ZiarnaJFrame
     */
    public ZiarnaJFrame() {
        initComponents();

        jLabel3.setText( "Rozmiar - " + jSlider1.getValue() );
        fieldJPanel1.setBoardSize( jSlider1.getValue() );
        jLabel4.setText( "Ilość ziaren - " + jSlider2.getValue() );
        jLabel6.setText("");

        fieldJPanel1.setInteractionInterface(new modwiel.view.FieldJPanel.InteractionInterface() {
            @Override
            public void onFielfPlaced(int toplace) {
                jLabel6.setText("Do dodania: " + toplace);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        fieldJPanel1 = new modwiel.view.FieldJPanel();
        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jSlider1 = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jSlider3 = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Rozrost ziaren"); // NOI18N
        setResizable(false);

        javax.swing.GroupLayout fieldJPanel1Layout = new javax.swing.GroupLayout(fieldJPanel1);
        fieldJPanel1.setLayout(fieldJPanel1Layout);
        fieldJPanel1Layout.setHorizontalGroup(
            fieldJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
        );
        fieldJPanel1Layout.setVerticalGroup(
            fieldJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Moore", "VonNeuman", "HexaLewe", "HexaPrawe", "HexaLosowe", "Pentagonalne" }));

        jLabel1.setText("Environment :");

        jLabel2.setText("Nucleon growth");

        jCheckBox1.setText("Periodic Condition");

        jSlider1.setMaximum(300);
        jSlider1.setMinimum(100);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel3.setText("Size");

        jLabel4.setText("Nucleons count");

        jSlider2.setMaximum(50);
        jSlider2.setMinimum(1);
        jSlider2.setValue(3);
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });

        jLabel5.setText("Nucleon location :");

        jButton2.setText("random");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("handmade");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel6.setText("[num]");

        jLabel7.setText("Radius");

        jButton9.setText("Only Bondary");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("CA-CA");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton12.setText("Only one boundary");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton11.setText("Dual phase MC -> CA");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel6)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(10, 10, 10))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSlider2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jLabel6)))
                    .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jButton11))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jButton12))
                .addContainerGap())
        );

        jButton4.setText("Export To BMP");
        jButton4.setActionCommand("exportBtn");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Export To TXT");
        jButton5.setActionCommand("exportTXT");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton1.setText("start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton6.setText("Import From TXT");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Inclusions Bondary");
        jButton7.setActionCommand("btnInclusions");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Inclusions Random");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fieldJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(jButton1))
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fieldJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7)
                            .addComponent(jButton8))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5)
                            .addComponent(jButton4))
                        .addGap(18, 18, 18)
                        .addComponent(jButton6)
                        .addGap(38, 38, 38)
                        .addComponent(jButton1)
                        .addGap(24, 24, 24))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private INeighborhood getNeighborhood(){
        int item =jComboBox1.getSelectedIndex();
        switch(item){
            case 0: return new Moore();
            case 1: return new Newman();
            case 2: return new HexaLeft();
            case 3: return new HexaRight();
            case 4: return new HexaRand();
        }
        return new Moore();
    }

    private void setEnabledUserInterface(boolean enabled){
        jSlider1.setEnabled(enabled);
        jCheckBox1.setEnabled(enabled);
        jButton1.setEnabled(enabled);
        jButton2.setEnabled(enabled);
        jButton3.setEnabled(enabled);
        jComboBox1.setEnabled(enabled);
        jSlider2.setEnabled(enabled);
        jSlider3.setEnabled(enabled);
//        jButton4.setEnabled(enabled);
//        jTextField1.setEnabled(enabled);
//        jTextField2.setEnabled(enabled);
//        jTextField3.setEnabled(enabled);
//        jTextField4.setEnabled(enabled);
    }

    //start
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setEnabledUserInterface(false);
        model = new RozrostZiaren( jCheckBox1.isSelected() , getNeighborhood() );
        model.setListener( fieldJPanel1 );
        WorkerThread worker = new WorkerThread( model, endAction );
//        worker.setMilis(Integer.parseInt(jTxtFldCzas.getText().toString()));
        worker.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        fieldJPanel1.randomize(jSlider2.getValue());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        JSlider source = (JSlider)evt.getSource();
        //if (!source.getValueIsAdjusting()) {
        int val = (int)source.getValue();
        fieldJPanel1.setBoardSize(val);
        jLabel3.setText( "Rozmiar - " + val );
        //}
    }//GEN-LAST:event_jSlider1StateChanged

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        JSlider source = (JSlider)evt.getSource();
        //if (!source.getValueIsAdjusting()) {
        int val = (int)source.getValue();
        jLabel4.setText( "Ilość ziaren - " + val );
        
        //}
    }//GEN-LAST:event_jSlider2StateChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jLabel6.setText("Do dodania: " + jSlider2.getValue());
        fieldJPanel1.placeFields( jSlider2.getValue() );
    }//GEN-LAST:event_jButton3ActionPerformed
        
    private void jTxtFldCzasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtFldCzasActionPerformed

    }//GEN-LAST:event_jTxtFldCzasActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        BufferedImage image = new BufferedImage(fieldJPanel1.getWidth(), fieldJPanel1.getHeight(), BufferedImage.TYPE_INT_RGB);
                    Graphics2D g = image.createGraphics();
                    fieldJPanel1.printAll(g);
                    g.dispose();
                    try {
                        ImageIO.write(image, "jpg", new File("Paint.jpg"));
                        ImageIO.write(image, "png", new File("Paint.png"));
                    } catch (IOException exp) {
                        exp.printStackTrace();
                    }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Field[][] dateToTXT = fieldJPanel1.getData();
        PrintWriter writer = null;
        if(dateToTXT == null){
           return;
        }
        try {
            writer = new PrintWriter("../montecarlo/Export_TXT.txt", "UTF-8");
            writer.format(" %d %d\r\n",dateToTXT.length,dateToTXT.length);
            for(int x=0 ;x<dateToTXT.length ;x++){
                for(int y=0; y<dateToTXT[x].length;y++){
                    String col_1 = String.format("#%06x", dateToTXT[x][y].getColor().getRGB() & 0x00FFFFFF);
                    int colRGB = dateToTXT[x][y].getColor().getRGB();
                    //System.out.format("%d %d %f %d \n", x ,y, dateToTXT[x][y].getP(), dateToTXT[x][y].getType(), dateToTXT[x][y].getColor()); 
                    writer.format("%d %d %d %d %d\r\n", x ,y, (int)dateToTXT[x][y].getP(),
                            dateToTXT[x][y].getType(), colRGB);
                }
            }
        }
        catch(FileNotFoundException ex){
            System.out.println("error write to file :( ");
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(ZiarnaJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            if(writer != null)
            writer.close();
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        FileDialog dialog = new FileDialog((Frame)null, "Select File to Open");
        dialog.setMode(FileDialog.LOAD);
        dialog.setVisible(true);
        String fileName = dialog.getFile();
        System.out.println(fileName + " chosen.");
        
        Field [][] oldPanel = fieldJPanel1.getData();
        Field[][] dateFromTXT =null;
    
    BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(fileName));
        } 
        
        catch (FileNotFoundException ex) {
            Logger.getLogger(ZiarnaJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
        StringBuilder sb = new StringBuilder();
        String line;

        while ((line = br.readLine()) != null) {
            
        String[] parts = line.split(" ", 5);
        if (parts.length >= 5)
        {
            int xx = Integer.parseInt(parts[0]);
            int yy = Integer.parseInt(parts[1]);
            int phase = Integer.parseInt(parts[2]);
            int type = Integer.parseInt(parts[3]);
            int color = Integer.parseInt(parts[4]);
            
            Color color_1 = new Color(color);
            
            oldPanel[xx][yy].setColor(color_1);
            oldPanel[xx][yy].setP(phase);
            oldPanel[xx][yy].setType(type);
            
        }
        else 
        {
            String[] parts_1 = line.split(" ", 3);
            
            int x_height = Integer.parseInt(parts_1[1]);
            int y_width = Integer.parseInt(parts_1[2]);
            
            System.out.println("ignoring line: " + line);
            dateFromTXT = new Field[x_height][y_width];
        }
        }
        
        fieldJPanel1.invalidate();
        fieldJPanel1.validate();
        fieldJPanel1.repaint(); 
    }   
        
    catch (IOException ex) {
        Logger.getLogger(ZiarnaJFrame.class.getName()).log(Level.SEVERE, null, ex);
    } 
    finally {
           try {
               br.close();
           } 
           catch (IOException ex) {
               Logger.getLogger(ZiarnaJFrame.class.getName()).log(Level.SEVERE, null, ex);
           }
    }
    
    }//GEN-LAST:event_jButton6ActionPerformed

    //wtracenia na granicy 
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        int countOfIncludions = 12; // ilosc wtracen
        int sizeOfInclusions = 7;
        
        boolean circleInclusions = true; // false -kwadraty, true- kółka
        
        int iteratorForInclusions = 0;
        Field[][] fields = fieldJPanel1.getData();
        int[][] allNucleonsToInclusions = new int[fields.length*50][2];
        
        for(int x=0 ;x<fields.length-1 ;x++)
        {
            for(int y=0; y<fields[x].length;y++)
            {
                Color color_1 = fields[x][y].getColor();
                Color color_2 = fields[x+1][y].getColor();
                
                String col_1 = String.format("#%06x", color_1.getRGB() & 0x00FFFFFF);
                String col_2 = String.format("#%06x", color_2.getRGB() & 0x00FFFFFF);
                              
                if (!(col_1.equals(col_2)))
                { 
                    allNucleonsToInclusions[iteratorForInclusions][0] = x;
                    allNucleonsToInclusions[iteratorForInclusions][1] = y;
                    
                    iteratorForInclusions++;                   
                }
            }
        }
        Random rand = new Random();
        
        
        int i = 0;
        while(i<countOfIncludions){
            
            int n = rand.nextInt(iteratorForInclusions)+1;
        
            for(int x=0 ;x<fields.length-1 ;x++)
            {
                for(int y=0; y<fields[x].length;y++)
                {
                    if(!circleInclusions)
                    {
                        for (int xi = 0; xi < sizeOfInclusions; xi++)
                        {
                            for (int xj=0; xj<sizeOfInclusions; xj++)
                            {
                                if(allNucleonsToInclusions[n][0]+xi== x && allNucleonsToInclusions[n][1]+xj == y)
                                {
                                    fields[x][y].setColor(Color.BLACK);
                                }
                            }
                        }
                    }
                    else
                    {
                        //okragle wtracenia
                        int x2 = allNucleonsToInclusions[n][0];
                        int y2 = allNucleonsToInclusions[n][1];
                        int r = sizeOfInclusions;


                        int dx = x2 - x; // horizontal offset
                        int dy = y2 - y; // vertical offset
                        if ( (dx*dx + dy*dy) <= (r*r) )
                        {
                            fields[x][y].setColor(Color.BLACK);
                        }
                    }
                }
            }
            i++;
        }
        fieldJPanel1.invalidate();
        fieldJPanel1.validate();
        fieldJPanel1.repaint(); 

    }//GEN-LAST:event_jButton7ActionPerformed

    //wtracenia losowe
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
       int countOfIncludions = 6; // ilosc wtracen
        int sizeOfInclusions = 4;
        
        boolean circleInclusions = true; // false -kwadraty, true- kółka
        
        
        Field[][] fields = fieldJPanel1.getData();
        
        Random rand = new Random();
        
        int i = 0;
        while(i<countOfIncludions){
             int n = rand.nextInt(fields.length)+1;
            int n2 = rand.nextInt(fields.length)+1;
        
            for(int x=0 ;x<fields.length-1 ;x++)
            {
                
              
                for(int y=0; y<fields[x].length;y++)
                {
                   
                    if(!circleInclusions)
                    {
                        for (int xi = 0; xi < sizeOfInclusions; xi++)
                        {
                            for (int xj=0; xj<sizeOfInclusions; xj++)
                            {
                                
                                if(n2+xi== x && n+xj == y)
                                {
                                    fields[x][y].setColor(Color.BLACK);
                                }
                            }
                        }
                    }
                    else
                    {
                        //okragle wtracenia
                        int x2 = n2;
                        int y2 = n;
                        int r = sizeOfInclusions;


                        int dx = x2 - x; // horizontal offset
                        int dy = y2 - y; // vertical offset
                        if ( (dx*dx + dy*dy) <= (r*r) )
                        {
                            fields[x][y].setColor(Color.BLACK);
                        }
                    }
                }
            }
            i++;
        }
        fieldJPanel1.invalidate();
        fieldJPanel1.validate();
        fieldJPanel1.repaint(); 
    }//GEN-LAST:event_jButton8ActionPerformed

    //AllGrainsBoundaries
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        Field[][] fields = fieldJPanel1.getData();
        int[][] allNucleonsToInclusions = new int[fields.length*50][2];
        int iteratorForInclusions = 0;
        
        for(int x=0 ;x<fields.length-1 ;x++)
        {
            for(int y=0; y<fields[x].length-1;y++)
            {
                Color color_1_x = fields[x][y].getColor();
                Color color_2_x = fields[x+1][y].getColor();
                Color color_1_y = fields[x][y].getColor();
                Color color_2_y = fields[x][y+1].getColor();
                
                String col_1_x = String.format("#%06x", color_1_x.getRGB() & 0x00FFFFFF);
                String col_2_x = String.format("#%06x", color_2_x.getRGB() & 0x00FFFFFF);
                
                String col_1_y = String.format("#%06x", color_1_y.getRGB() & 0x00FFFFFF);
                String col_2_y = String.format("#%06x", color_2_y.getRGB() & 0x00FFFFFF);
                              
                if ((!(col_1_x.equals(col_2_x))) || (!(col_1_y.equals(col_2_y))))
                { 
                    allNucleonsToInclusions[iteratorForInclusions][0] = x;
                    allNucleonsToInclusions[iteratorForInclusions][1] = y;
                    
                    fields[x][y].setColor(Color.BLACK);
                    if(((x+1)== fields.length-1)){
                        fields[x+1][y].setColor(Color.BLACK);
                    }
                    if(((y+1)== fields.length-1)){
                        fields[x][y+1].setColor(Color.BLACK);
                    }
                    if(((x+1)== fields.length-1)&&((y+1)== fields.length-1))
                    {
                        fields[x+1][y+1].setColor(Color.BLACK);
                    }
                    
                    iteratorForInclusions++;                   
                }
                else
                {
                    
                    fields[x][y].setColor(Color.WHITE);
                    if(((x+1)== fields.length-1)){
                        fields[x+1][y].setColor(Color.WHITE);
                    }
                    if(((y+1)== fields.length-1)){
                        fields[x][y+1].setColor(Color.WHITE);
                    }
                    if(((x+1)== fields.length-1)&&((y+1)== fields.length-1))
                    {
                        fields[x+1][y+1].setColor(Color.WHITE);
                    }
                }
            }
        }
        
        System.out.println("Number of boundary grains: " + iteratorForInclusions);
        double size = (double)fields.length;
        System.out.println("Number of all grains: " + size*size);

        double percent = (iteratorForInclusions/(size*size))*100;

        System.out.println("% GB: " + percent);
        
        fieldJPanel1.invalidate();
        fieldJPanel1.validate();
        fieldJPanel1.repaint(); 
        
    }//GEN-LAST:event_jButton9ActionPerformed

    //CA-Ca
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
         Field[][] fields = fieldJPanel1.getData();
         
         Random generator = new Random();
         
         int wybr_i = generator.nextInt(fields.length);
         int wybr_j = generator.nextInt(fields.length);
         
         Color color_selected = fields[wybr_i][wybr_j].getColor();
         String color_const_selected = String.format("#%06x", color_selected.getRGB() & 0x00FFFFFF);
         
         
         for(int x=0 ;x<fields.length-1 ;x++)
        {
            for(int y=0; y<fields[x].length-1;y++)
            {
                Color color_1_x = fields[x][y].getColor();
                Color color_2_x = fields[x+1][y].getColor();
                Color color_1_y = fields[x][y].getColor();
                Color color_2_y = fields[x][y+1].getColor();
                
                
                String col_1_x = String.format("#%06x", color_1_x.getRGB() & 0x00FFFFFF);
                String col_2_x = String.format("#%06x", color_2_x.getRGB() & 0x00FFFFFF);
                
                String col_1_y = String.format("#%06x", color_1_y.getRGB() & 0x00FFFFFF);
                String col_2_y = String.format("#%06x", color_2_y.getRGB() & 0x00FFFFFF);
                
                if ((!(col_1_x.equals(color_const_selected))) || 
                    (!(col_2_x.equals(color_const_selected))) )
                { 
                    fields[x][y].setColor(Color.WHITE);
                    if(((x+1)== fields.length-1)){
                        fields[x+1][y].setColor(Color.WHITE);
                    }
                    if(((y+1)== fields.length-1)){
                        fields[x][y+1].setColor(Color.WHITE);
                    }
                    if(((x+1)== fields.length-1)&&((y+1)== fields.length-1))
                    {
                        fields[x+1][y+1].setColor(Color.WHITE);
                    }
                }
            }
        }
         
        fieldJPanel1.invalidate();
        fieldJPanel1.validate();
        fieldJPanel1.repaint();
    }//GEN-LAST:event_jButton10ActionPerformed

    //only one boundary
    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        Field[][] fields = fieldJPanel1.getData();
  
        Random rand = new Random();
        int x_rand = rand.nextInt(fields.length-1);
        int Y_rand = rand.nextInt(fields.length-1);
        Color color_selected = fields[x_rand][Y_rand].getColor();
        String color_const_selected = String.format("#%06x", color_selected.getRGB() & 0x00FFFFFF);
        
         for(int x=0 ;x<fields.length-1 ;x++)
        {
            for(int y=0; y<fields[x].length-1;y++)
            {
                Color color_1_x = fields[x][y].getColor();
                Color color_2_x = fields[x+1][y].getColor();
                Color color_1_y = fields[x][y].getColor();
                Color color_2_y = fields[x][y+1].getColor();
                
                
                String col_1_x = String.format("#%06x", color_1_x.getRGB() & 0x00FFFFFF);
                String col_2_x = String.format("#%06x", color_2_x.getRGB() & 0x00FFFFFF);
                
                String col_1_y = String.format("#%06x", color_1_y.getRGB() & 0x00FFFFFF);
                String col_2_y = String.format("#%06x", color_2_y.getRGB() & 0x00FFFFFF);
                
                if ((!(col_1_x.equals(color_const_selected))) || 
                    (!(col_2_x.equals(color_const_selected))) )
                { 
                    fields[x][y].setColor(Color.WHITE);
                    if(((x+1)== fields.length-1)){
                        fields[x+1][y].setColor(Color.WHITE);
                    }
                    if(((y+1)== fields.length-1)){
                        fields[x][y+1].setColor(Color.WHITE);
                    }
                    if(((x+1)== fields.length-1)&&((y+1)== fields.length-1))
                    {
                        fields[x+1][y+1].setColor(Color.WHITE);
                    }
                }
            }
        }
        fieldJPanel1.invalidate();
        fieldJPanel1.validate();
        fieldJPanel1.repaint();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        FileDialog dialog = new FileDialog((Frame)null, "Select File to Open");
        dialog.setMode(FileDialog.LOAD);
        dialog.setVisible(true);
        String fileName = dialog.getFile();
        System.out.println(fileName + " chosen.");
        
        Field [][] oldPanel = fieldJPanel1.getData();
        Field[][] dateFromTXT =null;
    
    BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(fileName));
        } 
        
        catch (FileNotFoundException ex) {
            Logger.getLogger(ZiarnaJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
        StringBuilder sb = new StringBuilder();
        String line;

        while ((line = br.readLine()) != null) {
            
        String[] parts = line.split(" ", 5);
        if (parts.length >= 5)
        {
            int xx = Integer.parseInt(parts[0]);
            int yy = Integer.parseInt(parts[1]);
            int phase = Integer.parseInt(parts[2]);
            int type = Integer.parseInt(parts[3]);
            int color = Integer.parseInt(parts[4]);
            
            if(color != -1)
            {
                Color color_1 = new Color(color);

                oldPanel[xx][yy].setColor(color_1);
                //oldPanel[xx][yy].setP(phase);
                //oldPanel[xx][yy].setType(type);
            }
            
        }
        else 
        {
            String[] parts_1 = line.split(" ", 3);
            
            int x_height = Integer.parseInt(parts_1[1]);
            int y_width = Integer.parseInt(parts_1[2]);
            
            System.out.println("ignoring line: " + line);
            dateFromTXT = new Field[x_height][y_width];
        }
        }
        
        fieldJPanel1.invalidate();
        fieldJPanel1.validate();
        fieldJPanel1.repaint(); 
    }   
        
    catch (IOException ex) {
        Logger.getLogger(ZiarnaJFrame.class.getName()).log(Level.SEVERE, null, ex);
    } 
    finally {
           try {
               br.close();
           } 
           catch (IOException ex) {
               Logger.getLogger(ZiarnaJFrame.class.getName()).log(Level.SEVERE, null, ex);
           }
    }
    }//GEN-LAST:event_jButton11ActionPerformed

    Runnable endAction = new Runnable() {
        @Override
        public void run() {
            setEnabledUserInterface(true);
        }
        
    };

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private modwiel.view.FieldJPanel fieldJPanel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JSlider jSlider3;
    // End of variables declaration//GEN-END:variables
}
